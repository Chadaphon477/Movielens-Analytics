import streamlit as st
import pandas as pd
import bcrypt
from pymongo import MongoClient
from datetime import datetime

# ---------------- MongoDB Connection ----------------
MONGO_URI = "mongodb+srv://Chadaphon:12345678c@cluster0.19mnxif.mongodb.net/movielens?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(MONGO_URI)
db = client["movielens"]

users_col   = db["users"]
logins_col  = db["logins"]
movies_col  = db["movies"]
ratings_col = db["ratings"]

# ---------- ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á ----------
GENRE_MAP = {
    "0":"Action","1":"Adventure","2":"Animation","3":"Children",
    "4":"Comedy","5":"Crime","6":"Documentary","7":"Drama",
    "8":"Fantasy","9":"Film-Noir","10":"Horror","11":"Musical",
    "12":"Mystery","13":"Romance","14":"Sci-Fi","15":"Thriller",
    "16":"War","17":"Western","18":"IMAX","19":"Biography"
}

def normalize_genre(val) -> str:
    """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ genre_8 ‡∏´‡∏£‡∏∑‡∏≠ 8 ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"""
    if pd.isna(val):
        return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
    s = str(val).strip()
    if s.lower().startswith("genre_"):
        num = s.split("_", 1)[1]
        return GENRE_MAP.get(num, s)
    if s.isdigit():
        return GENRE_MAP.get(s, s)
    return s

# ---------------- Cache Data ----------------
@st.cache_data
def load_movies():
    df = pd.DataFrame(list(movies_col.find({}, {"_id": 0, "movie_id": 1, "title": 1, "genre": 1})))
    if not df.empty:
        df = df.rename(columns={"genre": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"})
        df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"] = df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"].apply(normalize_genre)
    return df

@st.cache_data
def load_ratings():
    return pd.DataFrame(list(ratings_col.find({}, {"_id": 0, "movie_id": 1, "rating": 1})))

movies_df  = load_movies()
ratings_df = load_ratings()

# ---------------- Auth Functions ----------------
def register_user(username, password):
    if users_col.find_one({"username": username}):
        return False
    hashed_pw = bcrypt.hashpw(password.encode("utf-8"), bcrypt.gensalt())
    users_col.insert_one({"username": username, "password": hashed_pw})
    return True

def login_user(username, password):
    user = users_col.find_one({"username": username})
    ok = bool(user and bcrypt.checkpw(password.encode("utf-8"), user["password"]))
    logins_col.insert_one({
        "username": username,
        "status": "success" if ok else "failed",
        "timestamp": datetime.now(),
        "ip": "unknown"
    })
    return ok

# ---------------- UI ----------------
st.set_page_config(page_title="MovieLens Dashboard", layout="wide")
st.title("üé¨ MovieLens Dashboard")

if "auth" not in st.session_state:
    st.session_state["auth"] = False
if "username" not in st.session_state:
    st.session_state["username"] = ""

# ---------------- Login/Register ----------------
if not st.session_state["auth"]:
    choice = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π", ["Login", "Register"])

    if choice == "Login":
        st.subheader("üîë ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        if st.button("Login"):
            if login_user(username, password):
                st.session_state["auth"] = True
                st.session_state["username"] = username
                st.success(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {username} üëã")
                st.rerun()
            else:
                st.error("‚ùå Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    else:  # Register
        st.subheader("üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
        username = st.text_input("Username ‡πÉ‡∏´‡∏°‡πà")
        password = st.text_input("Password ‡πÉ‡∏´‡∏°‡πà", type="password")
        if st.button("Register"):
            if register_user(username, password):
                st.success("‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            else:
                st.error("‚ùå Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß")

# ---------------- Dashboard ----------------
else:
    menu = st.sidebar.radio(
        "‡πÄ‡∏°‡∏ô‡∏π",
        ["Home", "Movies", "Ratings", "Summary", "Top Movies", "Bottom Movies", "Genres Distribution", "Logout"]
    )

    # ----- Home -----
    if menu == "Home":
        st.header("üè† Home")
        st.markdown("""
        ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà **MovieLens Dashboard**  
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö **FastAPI + MongoDB Atlas** ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ **Streamlit**

        **Tech Stack**
        - Backend: FastAPI, PyMongo, MongoDB Atlas  
        - Frontend: Streamlit, Pandas  
        - Auth: Register/Login (bcrypt) + ‡πÄ‡∏Å‡πá‡∏ö Log ‡∏•‡∏á MongoDB (`logins`)
        """)

    # ----- Movies -----
    elif menu == "Movies":
        st.header("üé¨ Movies")
        total_movies  = len(movies_df)
        total_reviews = len(ratings_df)
        avg_rating    = ratings_df["rating"].mean() if not ratings_df.empty else 0

        c1, c2, c3 = st.columns(3)
        c1.metric("üìö ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á", f"{total_movies:,}")
        c2.metric("üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", f"{total_reviews:,}")
        c3.metric("‚≠ê ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Rating", f"{avg_rating:.2f}")

        st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        cols = [c for c in ["movie_id", "title", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"] if c in movies_df.columns]
        st.dataframe(movies_df[cols])

    # ----- Ratings -----
    elif menu == "Ratings":
        st.header("‚≠ê Ratings")

        genres = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(movies_df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"].dropna().astype(str).unique())
        sel_genre = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á", genres)

        merged_df = ratings_df.merge(movies_df, on="movie_id", how="left")

        if sel_genre != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            df_show = merged_df[merged_df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"].astype(str) == sel_genre]
        else:
            df_show = merged_df

        st.subheader("Distribution of Ratings")
        if not df_show.empty:
            st.bar_chart(df_show["rating"].value_counts().sort_index())
        else:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

        st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Rating ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå")
        if not df_show.empty:
            avg_table = (
                df_show.groupby(["movie_id", "title", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"])["rating"]
                .agg(["count", "mean"])
                .reset_index()
                .rename(columns={"count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "mean": "‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"})
                .sort_values("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", ascending=False)
            )
            avg_table["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"] = avg_table["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"].round(2)
            st.dataframe(avg_table)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á")

    # ----- Summary -----
    elif menu == "Summary":
        st.header("üìä Summary")
        merged = ratings_df.merge(movies_df, on="movie_id", how="left")
        if not merged.empty:
            summary = (
                merged.groupby("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á")["rating"]
                .agg(["count", "mean"])
                .reset_index()
                .rename(columns={"count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "mean": "‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"})
                .sort_values("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", ascending=False)
            )
            summary["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"] = summary["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"].round(2)
            st.dataframe(summary)
        else:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ")

    # ----- Top Movies -----
    elif menu == "Top Movies":
        st.header("üèÜ Top Movies")
        merged = ratings_df.merge(movies_df, on="movie_id", how="left")
        if not merged.empty:
            top_movies = (
                merged.groupby(["movie_id", "title", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"])["rating"]
                .agg(["count", "mean"])
                .reset_index()
                .rename(columns={"count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "mean": "‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"})
                .sort_values("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", ascending=False)
                .head(10)
            )
            top_movies["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"] = top_movies["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"].round(2)
            st.dataframe(top_movies)
        else:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Top Movies")

    # ----- Bottom Movies -----
    elif menu == "Bottom Movies":
        st.header("üìâ Bottom Movies")
        merged = ratings_df.merge(movies_df, on="movie_id", how="left")
        if not merged.empty:
            bottom_movies = (
                merged.groupby(["movie_id", "title", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"])["rating"]
                .agg(["count", "mean"])
                .reset_index()
                .rename(columns={"count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "mean": "‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"})
                .sort_values("‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", ascending=True)
                .head(10)
            )
            bottom_movies["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"] = bottom_movies["‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"].round(2)
            st.dataframe(bottom_movies)
        else:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bottom Movies")

    # ----- Genres Distribution -----
    elif menu == "Genres Distribution":
        st.header("üìä Genres Distribution")
        if not movies_df.empty:
            genre_counts = movies_df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"].value_counts().reset_index()
            genre_counts.columns = ["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á"]
            st.bar_chart(genre_counts.set_index("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á"))
            st.dataframe(genre_counts)
        else:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á")

    # ----- Logout -----
    else:
        st.session_state["auth"] = False
        st.session_state["username"] = ""
        st.success("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        st.rerun()
